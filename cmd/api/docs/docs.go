// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Логин по email и паролю, выставляет httpOnly cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация",
                "parameters": [
                    {
                        "description": "Параметры авторизации",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "успех",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    },
                    "400": {
                        "description": "ошибка валидации",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    },
                    "401": {
                        "description": "неверные логин/пароль",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    },
                    "500": {
                        "description": "внутренняя ошибка",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Отозвать токен и очистить cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Выход",
                "responses": {
                    "200": {
                        "description": "выход успешен",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    },
                    "500": {
                        "description": "выход не удался",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "get": {
                "description": "Проверяет валидность текущего httpOnly cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Проверка токена",
                "responses": {
                    "200": {
                        "description": "токен валидный",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    },
                    "401": {
                        "description": "токен невалидный или истек",
                        "schema": {
                            "$ref": "#/definitions/auth.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.Response": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "expiresAt": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "auth.loginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Course Work API",
	Description:      "API Gateway для микросервисов",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
